{"remainingRequest":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/babel-loader/lib/index.js!/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/body.js","dependencies":[{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/body.js","mtime":499162500000},{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport { setBrand } from \"./utils/colors.js\";\nimport { isSSR } from \"./plugins/Platform.js\";\n\nfunction getMobilePlatform(is) {\n  if (is.ios === true) return 'ios';\n  if (is.android === true) return 'android';\n  if (is.winphone === true) return 'winphone';\n}\n\nfunction getBodyClasses(_ref, cfg) {\n  var is = _ref.is,\n      has = _ref.has,\n      within = _ref.within;\n  var cls = [is.desktop ? 'desktop' : 'mobile', has.touch ? 'touch' : 'no-touch'];\n\n  if (is.mobile === true) {\n    var mobile = getMobilePlatform(is);\n\n    if (mobile !== void 0) {\n      cls.push('platform-' + mobile);\n    }\n  }\n\n  if (is.cordova === true) {\n    cls.push('cordova');\n\n    if (is.ios === true && (cfg.cordova === void 0 || cfg.cordova.iosStatusBarPadding !== false)) {\n      cls.push('q-ios-padding');\n    }\n  } else if (is.electron === true) {\n    cls.push('electron');\n  }\n\n  within.iframe === true && cls.push('within-iframe');\n  return cls;\n}\n\nfunction bodyInit(Platform, cfg) {\n  var cls = getBodyClasses(Platform, cfg);\n\n  if (Platform.is.ie === true && Platform.is.versionNumber === 11) {\n    cls.forEach(function (c) {\n      return document.body.classList.add(c);\n    });\n  } else {\n    document.body.classList.add.apply(document.body.classList, cls);\n  }\n\n  if (Platform.is.ios === true) {\n    // needed for iOS button active state\n    document.body.addEventListener('touchstart', function () {});\n  }\n}\n\nfunction setColors(brand) {\n  for (var color in brand) {\n    setBrand(color, brand[color]);\n  }\n}\n\nexport default {\n  install: function install($q, queues, cfg) {\n    if (isSSR === true) {\n      queues.server.push(function (q, ctx) {\n        var cls = getBodyClasses(q.platform, cfg),\n            fn = ctx.ssr.setBodyClasses;\n\n        if (typeof fn === 'function') {\n          fn(cls);\n        } else {\n          ctx.ssr.Q_BODY_CLASSES = cls.join(' ');\n        }\n      });\n      return;\n    }\n\n    cfg.brand && setColors(cfg.brand);\n    bodyInit($q.platform, cfg);\n  }\n};",{"version":3,"sources":["/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/body.js"],"names":["setBrand","isSSR","getMobilePlatform","is","ios","android","winphone","getBodyClasses","cfg","has","within","cls","desktop","touch","mobile","push","cordova","iosStatusBarPadding","electron","iframe","bodyInit","Platform","ie","versionNumber","forEach","c","document","body","classList","add","apply","addEventListener","setColors","brand","color","install","$q","queues","server","q","ctx","platform","fn","ssr","setBodyClasses","Q_BODY_CLASSES","join"],"mappings":"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","sourcesContent":["import { setBrand } from './utils/colors.js'\nimport { isSSR } from './plugins/Platform.js'\n\nfunction getMobilePlatform (is) {\n  if (is.ios === true) return 'ios'\n  if (is.android === true) return 'android'\n  if (is.winphone === true) return 'winphone'\n}\n\nfunction getBodyClasses ({ is, has, within }, cfg) {\n  const cls = [\n    is.desktop ? 'desktop' : 'mobile',\n    has.touch ? 'touch' : 'no-touch'\n  ]\n\n  if (is.mobile === true) {\n    const mobile = getMobilePlatform(is)\n    if (mobile !== void 0) {\n      cls.push('platform-' + mobile)\n    }\n  }\n\n  if (is.cordova === true) {\n    cls.push('cordova')\n\n    if (\n      is.ios === true &&\n      (cfg.cordova === void 0 || cfg.cordova.iosStatusBarPadding !== false)\n    ) {\n      cls.push('q-ios-padding')\n    }\n  }\n  else if (is.electron === true) {\n    cls.push('electron')\n  }\n\n  within.iframe === true && cls.push('within-iframe')\n\n  return cls\n}\n\nfunction bodyInit (Platform, cfg) {\n  const cls = getBodyClasses(Platform, cfg)\n\n  if (Platform.is.ie === true && Platform.is.versionNumber === 11) {\n    cls.forEach(c => document.body.classList.add(c))\n  }\n  else {\n    document.body.classList.add.apply(document.body.classList, cls)\n  }\n\n  if (Platform.is.ios === true) {\n    // needed for iOS button active state\n    document.body.addEventListener('touchstart', () => {})\n  }\n}\n\nfunction setColors (brand) {\n  for (let color in brand) {\n    setBrand(color, brand[color])\n  }\n}\n\nexport default {\n  install ($q, queues, cfg) {\n    if (isSSR === true) {\n      queues.server.push((q, ctx) => {\n        const\n          cls = getBodyClasses(q.platform, cfg),\n          fn = ctx.ssr.setBodyClasses\n\n        if (typeof fn === 'function') {\n          fn(cls)\n        }\n        else {\n          ctx.ssr.Q_BODY_CLASSES = cls.join(' ')\n        }\n      })\n      return\n    }\n\n    cfg.brand && setColors(cfg.brand)\n    bodyInit($q.platform, cfg)\n  }\n}\n"]}]}