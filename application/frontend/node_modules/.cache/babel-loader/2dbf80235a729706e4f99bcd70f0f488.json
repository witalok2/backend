{"remainingRequest":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/babel-loader/lib/index.js!/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/ssr-update.js","dependencies":[{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/ssr-update.js","mtime":499162500000},{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/web.dom.iterable\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { $q, queues } from \"./install.js\";\nvar mixin = {\n  mounted: function mounted() {\n    var _this = this;\n\n    queues.takeover.forEach(function (run) {\n      run(_this.$q);\n    });\n  }\n};\nexport default function (ctx) {\n  if (ctx.ssr) {\n    var q = _objectSpread({}, $q);\n\n    Object.assign(ctx.ssr, {\n      Q_HEAD_TAGS: '',\n      Q_BODY_ATTRS: '',\n      Q_BODY_TAGS: ''\n    });\n    queues.server.forEach(function (run) {\n      run(q, ctx);\n    });\n    ctx.app.$q = q;\n  } else {\n    var mixins = ctx.app.mixins || [];\n\n    if (!mixins.includes(mixin)) {\n      ctx.app.mixins = mixins.concat(mixin);\n    }\n  }\n}",{"version":3,"sources":["/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/ssr-update.js"],"names":["$q","queues","mixin","mounted","takeover","forEach","run","ctx","ssr","q","Object","assign","Q_HEAD_TAGS","Q_BODY_ATTRS","Q_BODY_TAGS","server","app","mixins","includes","concat"],"mappings":";;;;;;;;;;;AAAA,SAASA,EAAT,EAAaC,MAAb;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,OADY,qBACD;AAAA;;AACTF,IAAAA,MAAM,CAACG,QAAP,CAAgBC,OAAhB,CAAwB,UAAAC,GAAG,EAAI;AAC7BA,MAAAA,GAAG,CAAC,KAAI,CAACN,EAAN,CAAH;AACD,KAFD;AAGD;AALW,CAAd;AAQA,eAAe,UAAUO,GAAV,EAAe;AAC5B,MAAIA,GAAG,CAACC,GAAR,EAAa;AACX,QAAMC,CAAC,qBAAQT,EAAR,CAAP;;AAEAU,IAAAA,MAAM,CAACC,MAAP,CAAcJ,GAAG,CAACC,GAAlB,EAAuB;AACrBI,MAAAA,WAAW,EAAE,EADQ;AAErBC,MAAAA,YAAY,EAAE,EAFO;AAGrBC,MAAAA,WAAW,EAAE;AAHQ,KAAvB;AAMAb,IAAAA,MAAM,CAACc,MAAP,CAAcV,OAAd,CAAsB,UAAAC,GAAG,EAAI;AAC3BA,MAAAA,GAAG,CAACG,CAAD,EAAIF,GAAJ,CAAH;AACD,KAFD;AAIAA,IAAAA,GAAG,CAACS,GAAJ,CAAQhB,EAAR,GAAaS,CAAb;AACD,GAdD,MAeK;AACH,QAAMQ,MAAM,GAAGV,GAAG,CAACS,GAAJ,CAAQC,MAAR,IAAkB,EAAjC;;AACA,QAAI,CAACA,MAAM,CAACC,QAAP,CAAgBhB,KAAhB,CAAL,EAA6B;AAC3BK,MAAAA,GAAG,CAACS,GAAJ,CAAQC,MAAR,GAAiBA,MAAM,CAACE,MAAP,CAAcjB,KAAd,CAAjB;AACD;AACF;AACF","sourcesContent":["import { $q, queues } from './install.js'\n\nconst mixin = {\n  mounted () {\n    queues.takeover.forEach(run => {\n      run(this.$q)\n    })\n  }\n}\n\nexport default function (ctx) {\n  if (ctx.ssr) {\n    const q = { ...$q }\n\n    Object.assign(ctx.ssr, {\n      Q_HEAD_TAGS: '',\n      Q_BODY_ATTRS: '',\n      Q_BODY_TAGS: ''\n    })\n\n    queues.server.forEach(run => {\n      run(q, ctx)\n    })\n\n    ctx.app.$q = q\n  }\n  else {\n    const mixins = ctx.app.mixins || []\n    if (!mixins.includes(mixin)) {\n      ctx.app.mixins = mixins.concat(mixin)\n    }\n  }\n}\n"]}]}