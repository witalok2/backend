{"remainingRequest":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/babel-loader/lib/index.js!/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/components/table/table-row-selection.js","dependencies":[{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/components/table/table-row-selection.js","mtime":499162500000},{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nexport default {\n  props: {\n    selection: {\n      type: String,\n      default: 'none',\n      validator: function validator(v) {\n        return ['single', 'multiple', 'none'].includes(v);\n      }\n    },\n    selected: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  computed: {\n    selectedKeys: function selectedKeys() {\n      var _this = this;\n\n      var keys = {};\n      this.selected.map(function (row) {\n        return row[_this.rowKey];\n      }).forEach(function (key) {\n        keys[key] = true;\n      });\n      return keys;\n    },\n    hasSelectionMode: function hasSelectionMode() {\n      return this.selection !== 'none';\n    },\n    singleSelection: function singleSelection() {\n      return this.selection === 'single';\n    },\n    multipleSelection: function multipleSelection() {\n      return this.selection === 'multiple';\n    },\n    allRowsSelected: function allRowsSelected() {\n      var _this2 = this;\n\n      if (this.multipleSelection === true) {\n        return this.computedRows.length > 0 && this.computedRows.every(function (row) {\n          return _this2.selectedKeys[row[_this2.rowKey]] === true;\n        });\n      }\n    },\n    someRowsSelected: function someRowsSelected() {\n      var _this3 = this;\n\n      if (this.multipleSelection === true) {\n        return !this.allRowsSelected && this.computedRows.some(function (row) {\n          return _this3.selectedKeys[row[_this3.rowKey]] === true;\n        });\n      }\n    },\n    rowsSelectedNumber: function rowsSelectedNumber() {\n      return this.selected.length;\n    }\n  },\n  methods: {\n    isRowSelected: function isRowSelected(key) {\n      return this.selectedKeys[key] === true;\n    },\n    clearSelection: function clearSelection() {\n      this.$emit('update:selected', []);\n    },\n    __updateSelection: function __updateSelection(keys, rows, added) {\n      var _this4 = this;\n\n      this.$emit('selection', {\n        rows: rows,\n        added: added,\n        keys: keys\n      });\n      var payload = this.singleSelection === true ? added === true ? rows : [] : added === true ? this.selected.concat(rows) : this.selected.filter(function (row) {\n        return keys.includes(row[_this4.rowKey]) === false;\n      });\n      this.$emit('update:selected', payload);\n    }\n  }\n};",{"version":3,"sources":["/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/components/table/table-row-selection.js"],"names":["props","selection","type","String","default","validator","v","includes","selected","Array","computed","selectedKeys","keys","map","row","rowKey","forEach","key","hasSelectionMode","singleSelection","multipleSelection","allRowsSelected","computedRows","length","every","someRowsSelected","some","rowsSelectedNumber","methods","isRowSelected","clearSelection","$emit","__updateSelection","rows","added","payload","concat","filter"],"mappings":"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","sourcesContent":["export default {\n  props: {\n    selection: {\n      type: String,\n      default: 'none',\n      validator: v => ['single', 'multiple', 'none'].includes(v)\n    },\n    selected: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  computed: {\n    selectedKeys () {\n      const keys = {}\n      this.selected.map(row => row[this.rowKey]).forEach(key => {\n        keys[key] = true\n      })\n      return keys\n    },\n\n    hasSelectionMode () {\n      return this.selection !== 'none'\n    },\n\n    singleSelection () {\n      return this.selection === 'single'\n    },\n\n    multipleSelection () {\n      return this.selection === 'multiple'\n    },\n\n    allRowsSelected () {\n      if (this.multipleSelection === true) {\n        return this.computedRows.length > 0 && this.computedRows.every(row => this.selectedKeys[row[this.rowKey]] === true)\n      }\n    },\n\n    someRowsSelected () {\n      if (this.multipleSelection === true) {\n        return !this.allRowsSelected && this.computedRows.some(row => this.selectedKeys[row[this.rowKey]] === true)\n      }\n    },\n\n    rowsSelectedNumber () {\n      return this.selected.length\n    }\n  },\n\n  methods: {\n    isRowSelected (key) {\n      return this.selectedKeys[key] === true\n    },\n\n    clearSelection () {\n      this.$emit('update:selected', [])\n    },\n\n    __updateSelection (keys, rows, added) {\n      this.$emit('selection', { rows, added, keys })\n\n      const payload = this.singleSelection === true\n        ? (added === true ? rows : [])\n        : (\n          added === true\n            ? this.selected.concat(rows)\n            : this.selected.filter(\n              row => keys.includes(row[this.rowKey]) === false\n            )\n        )\n\n      this.$emit('update:selected', payload)\n    }\n  }\n}\n"]}]}