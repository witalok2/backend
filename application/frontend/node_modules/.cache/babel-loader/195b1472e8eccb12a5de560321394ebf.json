{"remainingRequest":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/babel-loader/lib/index.js!/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/install.js","dependencies":[{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/install.js","mtime":499162500000},{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"./polyfills.js\";\nimport { version } from \"../package.json\";\nimport Platform, { isSSR } from \"./plugins/Platform.js\";\nimport Screen from \"./plugins/Screen.js\";\nimport History from \"./history.js\";\nimport Lang from \"./lang.js\";\nimport Body from \"./body.js\";\nimport IconSet from \"./icon-set.js\";\nexport var queues = {\n  server: [],\n  // on SSR update\n  takeover: [] // on client takeover\n\n};\nexport var $q = {\n  version: version\n};\nexport default function (Vue) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (this.__installed) {\n    return;\n  }\n\n  this.__installed = true;\n  var cfg = opts.config || {}; // required plugins\n\n  Platform.install($q, queues);\n  Body.install($q, queues, cfg);\n  Screen.install($q, queues);\n  History.install($q, cfg);\n  Lang.install($q, queues, opts.lang);\n  IconSet.install($q, opts.iconSet);\n\n  if (isSSR === true) {\n    Vue.mixin({\n      beforeCreate: function beforeCreate() {\n        this.$q = this.$root.$options.$q;\n      }\n    });\n  } else {\n    Vue.prototype.$q = $q;\n  }\n\n  opts.components && Object.keys(opts.components).forEach(function (key) {\n    var c = opts.components[key];\n\n    if (typeof c === 'function') {\n      Vue.component(c.options.name, c);\n    }\n  });\n  opts.directives && Object.keys(opts.directives).forEach(function (key) {\n    var d = opts.directives[key];\n\n    if (d.name !== undefined && d.unbind !== void 0) {\n      Vue.directive(d.name, d);\n    }\n  });\n\n  if (opts.plugins) {\n    var param = {\n      $q: $q,\n      queues: queues,\n      cfg: cfg\n    };\n    Object.keys(opts.plugins).forEach(function (key) {\n      var p = opts.plugins[key];\n\n      if (typeof p.install === 'function' && p !== Platform && p !== Screen) {\n        p.install(param);\n      }\n    });\n  }\n}",{"version":3,"sources":["/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/install.js"],"names":["version","Platform","isSSR","Screen","History","Lang","Body","IconSet","queues","server","takeover","$q","Vue","opts","__installed","cfg","config","install","lang","iconSet","mixin","beforeCreate","$root","$options","prototype","components","Object","keys","forEach","key","c","component","options","name","directives","d","undefined","unbind","directive","plugins","param","p"],"mappings":"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","sourcesContent":["import './polyfills.js'\nimport { version } from '../package.json'\nimport Platform, { isSSR } from './plugins/Platform.js'\nimport Screen from './plugins/Screen.js'\nimport History from './history.js'\nimport Lang from './lang.js'\nimport Body from './body.js'\nimport IconSet from './icon-set.js'\n\nexport const queues = {\n  server: [], // on SSR update\n  takeover: [] // on client takeover\n}\n\nexport const $q = {\n  version\n}\n\nexport default function (Vue, opts = {}) {\n  if (this.__installed) { return }\n  this.__installed = true\n\n  const cfg = opts.config || {}\n\n  // required plugins\n  Platform.install($q, queues)\n  Body.install($q, queues, cfg)\n  Screen.install($q, queues)\n  History.install($q, cfg)\n  Lang.install($q, queues, opts.lang)\n  IconSet.install($q, opts.iconSet)\n\n  if (isSSR === true) {\n    Vue.mixin({\n      beforeCreate () {\n        this.$q = this.$root.$options.$q\n      }\n    })\n  }\n  else {\n    Vue.prototype.$q = $q\n  }\n\n  opts.components && Object.keys(opts.components).forEach(key => {\n    const c = opts.components[key]\n    if (typeof c === 'function') {\n      Vue.component(c.options.name, c)\n    }\n  })\n\n  opts.directives && Object.keys(opts.directives).forEach(key => {\n    const d = opts.directives[key]\n    if (d.name !== undefined && d.unbind !== void 0) {\n      Vue.directive(d.name, d)\n    }\n  })\n\n  if (opts.plugins) {\n    const param = { $q, queues, cfg }\n    Object.keys(opts.plugins).forEach(key => {\n      const p = opts.plugins[key]\n      if (typeof p.install === 'function' && p !== Platform && p !== Screen) {\n        p.install(param)\n      }\n    })\n  }\n}\n"]}]}