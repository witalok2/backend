{"remainingRequest":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/babel-loader/lib/index.js!/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/components/spinner/spinner-mixin.js","dependencies":[{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/components/spinner/spinner-mixin.js","mtime":499162500000},{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport { sizes } from \"../../mixins/size.js\";\nexport default {\n  props: {\n    color: String,\n    size: {\n      type: [Number, String],\n      default: '1em'\n    }\n  },\n  computed: {\n    cSize: function cSize() {\n      return this.size in sizes ? \"\".concat(sizes[this.size], \"px\") : this.size;\n    },\n    classes: function classes() {\n      if (this.color) {\n        return \"text-\".concat(this.color);\n      }\n    }\n  }\n};",{"version":3,"sources":["/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/components/spinner/spinner-mixin.js"],"names":["sizes","props","color","String","size","type","Number","default","computed","cSize","classes"],"mappings":";AAAA,SAASA,KAAT;AAEA,eAAe;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAEC,MADF;AAELC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,CAACC,MAAD,EAASH,MAAT,CADF;AAEJI,MAAAA,OAAO,EAAE;AAFL;AAFD,GADM;AASbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KADQ,mBACC;AACP,aAAO,KAAKL,IAAL,IAAaJ,KAAb,aACAA,KAAK,CAAC,KAAKI,IAAN,CADL,UAEH,KAAKA,IAFT;AAGD,KALO;AAORM,IAAAA,OAPQ,qBAOG;AACT,UAAI,KAAKR,KAAT,EAAgB;AACd,8BAAe,KAAKA,KAApB;AACD;AACF;AAXO;AATG,CAAf","sourcesContent":["import { sizes } from '../../mixins/size.js'\n\nexport default {\n  props: {\n    color: String,\n    size: {\n      type: [Number, String],\n      default: '1em'\n    }\n  },\n\n  computed: {\n    cSize () {\n      return this.size in sizes\n        ? `${sizes[this.size]}px`\n        : this.size\n    },\n\n    classes () {\n      if (this.color) {\n        return `text-${this.color}`\n      }\n    }\n  }\n}\n"]}]}