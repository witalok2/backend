{"remainingRequest":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/babel-loader/lib/index.js!/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/components/table/table-body.js","dependencies":[{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/components/table/table-body.js","mtime":499162500000},{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport QCheckbox from \"../checkbox/QCheckbox.js\";\nexport default {\n  methods: {\n    getTableBody: function getTableBody(h) {\n      var _this = this;\n\n      var body = this.$scopedSlots.body,\n          bodyCell = this.$scopedSlots['body-cell'],\n          topRow = this.$scopedSlots['top-row'],\n          bottomRow = this.$scopedSlots['bottom-row'];\n      var child = [];\n\n      if (body !== void 0) {\n        child = this.computedRows.map(function (row) {\n          var key = row[_this.rowKey],\n              selected = _this.isRowSelected(key);\n\n          return body(_this.addBodyRowMeta({\n            key: key,\n            row: row,\n            cols: _this.computedCols,\n            colsMap: _this.computedColsMap,\n            __trClass: selected ? 'selected' : ''\n          }));\n        });\n      } else {\n        child = this.computedRows.map(function (row) {\n          var key = row[_this.rowKey],\n              selected = _this.isRowSelected(key),\n              child = bodyCell ? _this.computedCols.map(function (col) {\n            return bodyCell(_this.addBodyCellMetaData({\n              row: row,\n              col: col\n            }));\n          }) : _this.computedCols.map(function (col) {\n            var slot = _this.$scopedSlots[\"body-cell-\".concat(col.name)];\n\n            return slot !== void 0 ? slot(_this.addBodyCellMetaData({\n              row: row,\n              col: col\n            })) : h('td', {\n              staticClass: col.__tdClass,\n              style: col.style,\n              class: col.classes\n            }, _this.getCellValue(col, row));\n          });\n\n          _this.hasSelectionMode === true && child.unshift(h('td', {\n            staticClass: 'q-table--col-auto-width'\n          }, [h(QCheckbox, {\n            props: {\n              value: selected,\n              color: _this.color,\n              dark: _this.dark,\n              dense: _this.dense\n            },\n            on: {\n              input: function input(adding) {\n                _this.__updateSelection([key], [row], adding);\n              }\n            }\n          })]));\n          return h('tr', {\n            key: key,\n            class: {\n              selected: selected\n            }\n          }, child);\n        });\n      }\n\n      if (topRow !== void 0) {\n        child.unshift(topRow({\n          cols: this.computedCols\n        }));\n      }\n\n      if (bottomRow !== void 0) {\n        child.push(bottomRow({\n          cols: this.computedCols\n        }));\n      }\n\n      return h('tbody', child);\n    },\n    addBodyRowMeta: function addBodyRowMeta(data) {\n      var _this2 = this;\n\n      this.hasSelectionMode === true && Object.defineProperty(data, 'selected', {\n        get: function get() {\n          return _this2.isRowSelected(data.key);\n        },\n        set: function set(adding) {\n          _this2.__updateSelection([data.key], [data.row], adding);\n        },\n        configurable: true,\n        enumerable: true\n      });\n      Object.defineProperty(data, 'expand', {\n        get: function get() {\n          return _this2.rowsExpanded[data.key] === true;\n        },\n        set: function set(val) {\n          _this2.$set(_this2.rowsExpanded, data.key, val);\n        },\n        configurable: true,\n        enumerable: true\n      });\n      data.cols = data.cols.map(function (col) {\n        var c = _objectSpread({}, col);\n\n        Object.defineProperty(c, 'value', {\n          get: function get() {\n            return _this2.getCellValue(col, data.row);\n          },\n          configurable: true,\n          enumerable: true\n        });\n        return c;\n      });\n      return data;\n    },\n    addBodyCellMetaData: function addBodyCellMetaData(data) {\n      var _this3 = this;\n\n      Object.defineProperty(data, 'value', {\n        get: function get() {\n          return _this3.getCellValue(data.col, data.row);\n        },\n        configurable: true,\n        enumerable: true\n      });\n      return data;\n    },\n    getCellValue: function getCellValue(col, row) {\n      var val = typeof col.field === 'function' ? col.field(row) : row[col.field];\n      return col.format !== void 0 ? col.format(val, row) : val;\n    }\n  }\n};",{"version":3,"sources":["/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/components/table/table-body.js"],"names":["QCheckbox","methods","getTableBody","h","body","$scopedSlots","bodyCell","topRow","bottomRow","child","computedRows","map","row","key","rowKey","selected","isRowSelected","addBodyRowMeta","cols","computedCols","colsMap","computedColsMap","__trClass","col","addBodyCellMetaData","slot","name","staticClass","__tdClass","style","class","classes","getCellValue","hasSelectionMode","unshift","props","value","color","dark","dense","on","input","adding","__updateSelection","push","data","Object","defineProperty","get","set","configurable","enumerable","rowsExpanded","val","$set","c","field","format"],"mappings":"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","sourcesContent":["import QCheckbox from '../checkbox/QCheckbox.js'\n\nexport default {\n  methods: {\n    getTableBody (h) {\n      const\n        body = this.$scopedSlots.body,\n        bodyCell = this.$scopedSlots['body-cell'],\n        topRow = this.$scopedSlots['top-row'],\n        bottomRow = this.$scopedSlots['bottom-row']\n      let\n        child = []\n\n      if (body !== void 0) {\n        child = this.computedRows.map(row => {\n          const\n            key = row[this.rowKey],\n            selected = this.isRowSelected(key)\n\n          return body(this.addBodyRowMeta({\n            key,\n            row,\n            cols: this.computedCols,\n            colsMap: this.computedColsMap,\n            __trClass: selected ? 'selected' : ''\n          }))\n        })\n      }\n      else {\n        child = this.computedRows.map(row => {\n          const\n            key = row[this.rowKey],\n            selected = this.isRowSelected(key),\n            child = bodyCell\n              ? this.computedCols.map(col => bodyCell(this.addBodyCellMetaData({ row, col })))\n              : this.computedCols.map(col => {\n                const slot = this.$scopedSlots[`body-cell-${col.name}`]\n                return slot !== void 0\n                  ? slot(this.addBodyCellMetaData({ row, col }))\n                  : h('td', {\n                    staticClass: col.__tdClass,\n                    style: col.style,\n                    class: col.classes\n                  }, this.getCellValue(col, row))\n              })\n\n          this.hasSelectionMode === true && child.unshift(\n            h('td', { staticClass: 'q-table--col-auto-width' }, [\n              h(QCheckbox, {\n                props: {\n                  value: selected,\n                  color: this.color,\n                  dark: this.dark,\n                  dense: this.dense\n                },\n                on: {\n                  input: adding => {\n                    this.__updateSelection([key], [row], adding)\n                  }\n                }\n              })\n            ])\n          )\n\n          return h('tr', { key, class: { selected } }, child)\n        })\n      }\n\n      if (topRow !== void 0) {\n        child.unshift(topRow({ cols: this.computedCols }))\n      }\n      if (bottomRow !== void 0) {\n        child.push(bottomRow({ cols: this.computedCols }))\n      }\n\n      return h('tbody', child)\n    },\n\n    addBodyRowMeta (data) {\n      this.hasSelectionMode === true && Object.defineProperty(data, 'selected', {\n        get: () => this.isRowSelected(data.key),\n        set: adding => {\n          this.__updateSelection([data.key], [data.row], adding)\n        },\n        configurable: true,\n        enumerable: true\n      })\n\n      Object.defineProperty(data, 'expand', {\n        get: () => this.rowsExpanded[data.key] === true,\n        set: val => {\n          this.$set(this.rowsExpanded, data.key, val)\n        },\n        configurable: true,\n        enumerable: true\n      })\n\n      data.cols = data.cols.map(col => {\n        const c = { ...col }\n        Object.defineProperty(c, 'value', {\n          get: () => this.getCellValue(col, data.row),\n          configurable: true,\n          enumerable: true\n        })\n        return c\n      })\n\n      return data\n    },\n\n    addBodyCellMetaData (data) {\n      Object.defineProperty(data, 'value', {\n        get: () => this.getCellValue(data.col, data.row),\n        configurable: true,\n        enumerable: true\n      })\n      return data\n    },\n\n    getCellValue (col, row) {\n      const val = typeof col.field === 'function' ? col.field(row) : row[col.field]\n      return col.format !== void 0 ? col.format(val, row) : val\n    }\n  }\n}\n"]}]}