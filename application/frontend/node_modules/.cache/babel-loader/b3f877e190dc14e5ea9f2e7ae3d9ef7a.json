{"remainingRequest":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/babel-loader/lib/index.js!/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/components/table/table-pagination.js","dependencies":[{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/components/table/table-pagination.js","mtime":499162500000},{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction samePagination(oldPag, newPag) {\n  for (var prop in newPag) {\n    if (newPag[prop] !== oldPag[prop]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction fixPagination(p) {\n  if (p.page < 1) {\n    p.page = 1;\n  }\n\n  if (p.rowsPerPage !== void 0 && p.rowsPerPage < 1) {\n    p.rowsPerPage = 0;\n  }\n\n  return p;\n}\n\nexport default {\n  props: {\n    pagination: Object,\n    rowsPerPageOptions: {\n      type: Array,\n      default: function _default() {\n        return [3, 5, 7, 10, 15, 20, 25, 50, 0];\n      }\n    }\n  },\n  computed: {\n    computedPagination: function computedPagination() {\n      return fixPagination(_objectSpread({}, this.innerPagination, {}, this.pagination));\n    },\n    firstRowIndex: function firstRowIndex() {\n      var _this$computedPaginat = this.computedPagination,\n          page = _this$computedPaginat.page,\n          rowsPerPage = _this$computedPaginat.rowsPerPage;\n      return (page - 1) * rowsPerPage;\n    },\n    lastRowIndex: function lastRowIndex() {\n      var _this$computedPaginat2 = this.computedPagination,\n          page = _this$computedPaginat2.page,\n          rowsPerPage = _this$computedPaginat2.rowsPerPage;\n      return page * rowsPerPage;\n    },\n    isFirstPage: function isFirstPage() {\n      return this.computedPagination.page === 1;\n    },\n    pagesNumber: function pagesNumber() {\n      return Math.max(1, Math.ceil(this.computedRowsNumber / this.computedPagination.rowsPerPage));\n    },\n    isLastPage: function isLastPage() {\n      return this.lastRowIndex === 0 ? true : this.computedPagination.page >= this.pagesNumber;\n    },\n    computedRowsPerPageOptions: function computedRowsPerPageOptions() {\n      var _this = this;\n\n      return this.rowsPerPageOptions.map(function (count) {\n        return {\n          label: count === 0 ? _this.$q.lang.table.allRows : '' + count,\n          value: count\n        };\n      });\n    }\n  },\n  watch: {\n    pagesNumber: function pagesNumber(lastPage, oldLastPage) {\n      if (lastPage === oldLastPage) {\n        return;\n      }\n\n      var currentPage = this.computedPagination.page;\n\n      if (lastPage && !currentPage) {\n        this.setPagination({\n          page: 1\n        });\n      } else if (lastPage < currentPage) {\n        this.setPagination({\n          page: lastPage\n        });\n      }\n    }\n  },\n  methods: {\n    __sendServerRequest: function __sendServerRequest(pagination) {\n      this.requestServerInteraction({\n        pagination: pagination,\n        filter: this.filter\n      });\n    },\n    setPagination: function setPagination(val, forceServerRequest) {\n      var newPagination = fixPagination(_objectSpread({}, this.computedPagination, {}, val));\n\n      if (samePagination(this.computedPagination, newPagination)) {\n        if (this.isServerSide && forceServerRequest) {\n          this.__sendServerRequest(newPagination);\n        }\n\n        return;\n      }\n\n      if (this.isServerSide) {\n        this.__sendServerRequest(newPagination);\n\n        return;\n      }\n\n      if (this.pagination) {\n        this.$emit('update:pagination', newPagination);\n      } else {\n        this.innerPagination = newPagination;\n      }\n    },\n    prevPage: function prevPage() {\n      var page = this.computedPagination.page;\n\n      if (page > 1) {\n        this.setPagination({\n          page: page - 1\n        });\n      }\n    },\n    nextPage: function nextPage() {\n      var _this$computedPaginat3 = this.computedPagination,\n          page = _this$computedPaginat3.page,\n          rowsPerPage = _this$computedPaginat3.rowsPerPage;\n\n      if (this.lastRowIndex > 0 && page * rowsPerPage < this.computedRowsNumber) {\n        this.setPagination({\n          page: page + 1\n        });\n      }\n    }\n  },\n  created: function created() {\n    this.$emit('update:pagination', _objectSpread({}, this.computedPagination));\n  }\n};",{"version":3,"sources":["/home/witalo/go/src/github.com/witalok2/application/frontend/node_modules/quasar/src/components/table/table-pagination.js"],"names":["samePagination","oldPag","newPag","prop","fixPagination","p","page","rowsPerPage","props","pagination","Object","rowsPerPageOptions","type","Array","default","computed","computedPagination","innerPagination","firstRowIndex","lastRowIndex","isFirstPage","pagesNumber","Math","max","ceil","computedRowsNumber","isLastPage","computedRowsPerPageOptions","map","count","label","$q","lang","table","allRows","value","watch","lastPage","oldLastPage","currentPage","setPagination","methods","__sendServerRequest","requestServerInteraction","filter","val","forceServerRequest","newPagination","isServerSide","$emit","prevPage","nextPage","created"],"mappings":";;;;;;;;;AAAA,SAASA,cAAT,CAAyBC,MAAzB,EAAiCC,MAAjC,EAAyC;AACvC,OAAK,IAAIC,IAAT,IAAiBD,MAAjB,EAAyB;AACvB,QAAIA,MAAM,CAACC,IAAD,CAAN,KAAiBF,MAAM,CAACE,IAAD,CAA3B,EAAmC;AACjC,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAED,SAASC,aAAT,CAAwBC,CAAxB,EAA2B;AACzB,MAAIA,CAAC,CAACC,IAAF,GAAS,CAAb,EAAgB;AACdD,IAAAA,CAAC,CAACC,IAAF,GAAS,CAAT;AACD;;AACD,MAAID,CAAC,CAACE,WAAF,KAAkB,KAAK,CAAvB,IAA4BF,CAAC,CAACE,WAAF,GAAgB,CAAhD,EAAmD;AACjDF,IAAAA,CAAC,CAACE,WAAF,GAAgB,CAAhB;AACD;;AACD,SAAOF,CAAP;AACD;;AAED,eAAe;AACbG,EAAAA,KAAK,EAAE;AACLC,IAAAA,UAAU,EAAEC,MADP;AAELC,IAAAA,kBAAkB,EAAE;AAClBC,MAAAA,IAAI,EAAEC,KADY;AAElBC,MAAAA,OAAO,EAAE;AAAA,eAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,CAA9B,CAAN;AAAA;AAFS;AAFf,GADM;AASbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBADQ,gCACc;AACpB,aAAOZ,aAAa,mBACf,KAAKa,eADU,MAEf,KAAKR,UAFU,EAApB;AAID,KANO;AAQRS,IAAAA,aARQ,2BAQS;AAAA,kCACe,KAAKF,kBADpB;AAAA,UACPV,IADO,yBACPA,IADO;AAAA,UACDC,WADC,yBACDA,WADC;AAEf,aAAO,CAACD,IAAI,GAAG,CAAR,IAAaC,WAApB;AACD,KAXO;AAaRY,IAAAA,YAbQ,0BAaQ;AAAA,mCACgB,KAAKH,kBADrB;AAAA,UACNV,IADM,0BACNA,IADM;AAAA,UACAC,WADA,0BACAA,WADA;AAEd,aAAOD,IAAI,GAAGC,WAAd;AACD,KAhBO;AAkBRa,IAAAA,WAlBQ,yBAkBO;AACb,aAAO,KAAKJ,kBAAL,CAAwBV,IAAxB,KAAiC,CAAxC;AACD,KApBO;AAsBRe,IAAAA,WAtBQ,yBAsBO;AACb,aAAOC,IAAI,CAACC,GAAL,CACL,CADK,EAELD,IAAI,CAACE,IAAL,CAAU,KAAKC,kBAAL,GAA0B,KAAKT,kBAAL,CAAwBT,WAA5D,CAFK,CAAP;AAID,KA3BO;AA6BRmB,IAAAA,UA7BQ,wBA6BM;AACZ,aAAO,KAAKP,YAAL,KAAsB,CAAtB,GACH,IADG,GAEH,KAAKH,kBAAL,CAAwBV,IAAxB,IAAgC,KAAKe,WAFzC;AAGD,KAjCO;AAmCRM,IAAAA,0BAnCQ,wCAmCsB;AAAA;;AAC5B,aAAO,KAAKhB,kBAAL,CAAwBiB,GAAxB,CAA4B,UAAAC,KAAK;AAAA,eAAK;AAC3CC,UAAAA,KAAK,EAAED,KAAK,KAAK,CAAV,GAAc,KAAI,CAACE,EAAL,CAAQC,IAAR,CAAaC,KAAb,CAAmBC,OAAjC,GAA2C,KAAKL,KADZ;AAE3CM,UAAAA,KAAK,EAAEN;AAFoC,SAAL;AAAA,OAAjC,CAAP;AAID;AAxCO,GATG;AAoDbO,EAAAA,KAAK,EAAE;AACLf,IAAAA,WADK,uBACQgB,QADR,EACkBC,WADlB,EAC+B;AAClC,UAAID,QAAQ,KAAKC,WAAjB,EAA8B;AAC5B;AACD;;AAED,UAAMC,WAAW,GAAG,KAAKvB,kBAAL,CAAwBV,IAA5C;;AACA,UAAI+B,QAAQ,IAAI,CAACE,WAAjB,EAA8B;AAC5B,aAAKC,aAAL,CAAmB;AAAElC,UAAAA,IAAI,EAAE;AAAR,SAAnB;AACD,OAFD,MAGK,IAAI+B,QAAQ,GAAGE,WAAf,EAA4B;AAC/B,aAAKC,aAAL,CAAmB;AAAElC,UAAAA,IAAI,EAAE+B;AAAR,SAAnB;AACD;AACF;AAbI,GApDM;AAoEbI,EAAAA,OAAO,EAAE;AACPC,IAAAA,mBADO,+BACcjC,UADd,EAC0B;AAC/B,WAAKkC,wBAAL,CAA8B;AAC5BlC,QAAAA,UAAU,EAAVA,UAD4B;AAE5BmC,QAAAA,MAAM,EAAE,KAAKA;AAFe,OAA9B;AAID,KANM;AAQPJ,IAAAA,aARO,yBAQQK,GARR,EAQaC,kBARb,EAQiC;AACtC,UAAMC,aAAa,GAAG3C,aAAa,mBAC9B,KAAKY,kBADyB,MAE9B6B,GAF8B,EAAnC;;AAKA,UAAI7C,cAAc,CAAC,KAAKgB,kBAAN,EAA0B+B,aAA1B,CAAlB,EAA4D;AAC1D,YAAI,KAAKC,YAAL,IAAqBF,kBAAzB,EAA6C;AAC3C,eAAKJ,mBAAL,CAAyBK,aAAzB;AACD;;AACD;AACD;;AAED,UAAI,KAAKC,YAAT,EAAuB;AACrB,aAAKN,mBAAL,CAAyBK,aAAzB;;AACA;AACD;;AAED,UAAI,KAAKtC,UAAT,EAAqB;AACnB,aAAKwC,KAAL,CAAW,mBAAX,EAAgCF,aAAhC;AACD,OAFD,MAGK;AACH,aAAK9B,eAAL,GAAuB8B,aAAvB;AACD;AACF,KAhCM;AAkCPG,IAAAA,QAlCO,sBAkCK;AAAA,UACF5C,IADE,GACO,KAAKU,kBADZ,CACFV,IADE;;AAEV,UAAIA,IAAI,GAAG,CAAX,EAAc;AACZ,aAAKkC,aAAL,CAAmB;AAAElC,UAAAA,IAAI,EAAEA,IAAI,GAAG;AAAf,SAAnB;AACD;AACF,KAvCM;AAyCP6C,IAAAA,QAzCO,sBAyCK;AAAA,mCACoB,KAAKnC,kBADzB;AAAA,UACFV,IADE,0BACFA,IADE;AAAA,UACIC,WADJ,0BACIA,WADJ;;AAEV,UAAI,KAAKY,YAAL,GAAoB,CAApB,IAAyBb,IAAI,GAAGC,WAAP,GAAqB,KAAKkB,kBAAvD,EAA2E;AACzE,aAAKe,aAAL,CAAmB;AAAElC,UAAAA,IAAI,EAAEA,IAAI,GAAG;AAAf,SAAnB;AACD;AACF;AA9CM,GApEI;AAqHb8C,EAAAA,OArHa,qBAqHF;AACT,SAAKH,KAAL,CAAW,mBAAX,oBAAqC,KAAKjC,kBAA1C;AACD;AAvHY,CAAf","sourcesContent":["function samePagination (oldPag, newPag) {\n  for (let prop in newPag) {\n    if (newPag[prop] !== oldPag[prop]) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction fixPagination (p) {\n  if (p.page < 1) {\n    p.page = 1\n  }\n  if (p.rowsPerPage !== void 0 && p.rowsPerPage < 1) {\n    p.rowsPerPage = 0\n  }\n  return p\n}\n\nexport default {\n  props: {\n    pagination: Object,\n    rowsPerPageOptions: {\n      type: Array,\n      default: () => [3, 5, 7, 10, 15, 20, 25, 50, 0]\n    }\n  },\n\n  computed: {\n    computedPagination () {\n      return fixPagination({\n        ...this.innerPagination,\n        ...this.pagination\n      })\n    },\n\n    firstRowIndex () {\n      const { page, rowsPerPage } = this.computedPagination\n      return (page - 1) * rowsPerPage\n    },\n\n    lastRowIndex () {\n      const { page, rowsPerPage } = this.computedPagination\n      return page * rowsPerPage\n    },\n\n    isFirstPage () {\n      return this.computedPagination.page === 1\n    },\n\n    pagesNumber () {\n      return Math.max(\n        1,\n        Math.ceil(this.computedRowsNumber / this.computedPagination.rowsPerPage)\n      )\n    },\n\n    isLastPage () {\n      return this.lastRowIndex === 0\n        ? true\n        : this.computedPagination.page >= this.pagesNumber\n    },\n\n    computedRowsPerPageOptions () {\n      return this.rowsPerPageOptions.map(count => ({\n        label: count === 0 ? this.$q.lang.table.allRows : '' + count,\n        value: count\n      }))\n    }\n  },\n\n  watch: {\n    pagesNumber (lastPage, oldLastPage) {\n      if (lastPage === oldLastPage) {\n        return\n      }\n\n      const currentPage = this.computedPagination.page\n      if (lastPage && !currentPage) {\n        this.setPagination({ page: 1 })\n      }\n      else if (lastPage < currentPage) {\n        this.setPagination({ page: lastPage })\n      }\n    }\n  },\n\n  methods: {\n    __sendServerRequest (pagination) {\n      this.requestServerInteraction({\n        pagination,\n        filter: this.filter\n      })\n    },\n\n    setPagination (val, forceServerRequest) {\n      const newPagination = fixPagination({\n        ...this.computedPagination,\n        ...val\n      })\n\n      if (samePagination(this.computedPagination, newPagination)) {\n        if (this.isServerSide && forceServerRequest) {\n          this.__sendServerRequest(newPagination)\n        }\n        return\n      }\n\n      if (this.isServerSide) {\n        this.__sendServerRequest(newPagination)\n        return\n      }\n\n      if (this.pagination) {\n        this.$emit('update:pagination', newPagination)\n      }\n      else {\n        this.innerPagination = newPagination\n      }\n    },\n\n    prevPage () {\n      const { page } = this.computedPagination\n      if (page > 1) {\n        this.setPagination({ page: page - 1 })\n      }\n    },\n\n    nextPage () {\n      const { page, rowsPerPage } = this.computedPagination\n      if (this.lastRowIndex > 0 && page * rowsPerPage < this.computedRowsNumber) {\n        this.setPagination({ page: page + 1 })\n      }\n    }\n  },\n\n  created () {\n    this.$emit('update:pagination', { ...this.computedPagination })\n  }\n}\n"]}]}